name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: # Allow manual testing

jobs:
  build:
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-name: tllama
            artifact-name: tllama-linux-x86_64
            features: ""

          # ARM64 Linux via native GitHub ARM64 runners
          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            binary-name: tllama
            artifact-name: tllama-linux-arm64
            features: ""

          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-name: tllama.exe
            artifact-name: tllama-windows-x86_64.exe
            features: "hw-cuda"

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-name: tllama
            artifact-name: tllama-macos-intel
            features: "hw-metal"

          - os: macos-latest
            target: aarch64-apple-darwin
            binary-name: tllama
            artifact-name: tllama-macos-arm64
            features: "hw-metal"

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install CUDA Toolkit
        if: contains(matrix.features, 'hw-cuda')
        uses: Jimver/cuda-toolkit@v0.2.16
        with:
          cuda: "12.4.1"

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config

      - name: Install system dependencies (Linux ARM64)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config clang golang

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # cmake is usually pre-installed on GitHub runners
          which cmake || brew install cmake

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }}

      - name: Strip binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: strip target/${{ matrix.target }}/release/${{ matrix.binary-name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: target/${{ matrix.target }}/release/${{ matrix.binary-name }}
